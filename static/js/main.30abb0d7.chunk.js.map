{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","theme","settheme","color","backgroundColor","myStyle","setmyStyle","className","style","id","type","onClick","border","Alert","props","alert","role","msg","Navbar","mode","to","title","toggleMode","htmlFor","TextForm","text","setText","heading","rows","value","onChange","e","console","log","target","newText","toUpperCase","showAlert","toLowerCase","ctext","document","getElementById","select","navigator","clipboard","writeText","split","length","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uOAEe,SAASA,IACpB,MAA0BC,mBAAS,QAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,CACnCG,MAAM,QACNC,gBAAgB,UAFpB,mBAAOC,EAAP,KAAgBC,EAAhB,KAwBF,OACE,mCACE,sBAAKC,UAAU,YAAYC,MAAOH,EAAlC,UACE,oBAAIE,UAAU,OAAd,sBACA,sBAAKA,UAAU,YAAYE,GAAG,mBAA9B,UACE,sBAAKF,UAAU,iBAAf,UACE,oBAAIA,UAAU,mBAAmBE,GAAG,aAApC,SACE,wBACEF,UAAU,mBACVG,KAAK,SACLF,MAAOH,EACP,iBAAe,WACf,iBAAe,eACf,gBAAc,OACd,gBAAc,cAPhB,iCAYF,qBACEI,GAAG,cACHF,UAAU,mCACV,kBAAgB,aAChB,iBAAe,oBAJjB,SAME,sBAAKA,UAAU,iBAAiBC,MAAOH,EAAvC,UACE,8EADF,oXAOwC,IACtC,mDARF,uDAaJ,sBAAKE,UAAU,iBAAf,UACE,oBAAIA,UAAU,mBAAmBE,GAAG,aAApC,SACE,wBACEF,UAAU,6BACVG,KAAK,SACL,iBAAe,WACf,iBAAe,eACfF,MAAOH,EACP,gBAAc,QACd,gBAAc,cAPhB,iCAYF,qBACEI,GAAG,cACHF,UAAU,8BACV,kBAAgB,aAChB,iBAAe,oBAJjB,SAME,sBAAKA,UAAU,iBAAiBC,MAAOH,EAAvC,UACE,+EADF,qXAOoD,IAClD,mDARF,uDAaJ,sBAAKE,UAAU,iBAAf,UACE,oBAAIA,UAAU,mBAAmBE,GAAG,eAApC,SACE,wBACEF,UAAU,6BACVG,KAAK,SACL,iBAAe,WACf,iBAAe,iBACf,gBAAc,QACd,gBAAc,gBACdF,MAAOH,EAPT,iCAYF,qBACEI,GAAG,gBACHF,UAAU,8BACV,kBAAgB,eAChB,iBAAe,oBAJjB,SAME,sBAAKA,UAAU,iBAAiBC,MAAOH,EAAvC,UACE,8EADF,qXAOoD,IAClD,mDARF,0DAcN,yBAAQE,UAAU,uBAAuBI,QA7HrB,WACA,UAAjBN,EAAQF,QACPG,EAAW,CACPH,MAAM,QACVC,gBAAgB,QAChBQ,OAAO,oBAEPV,EAAS,UAEO,UAAjBG,EAAQF,QACPG,EAAW,CACPH,MAAM,QACVC,gBAAgB,UAEhBF,EAAS,UA+Gb,oBAA6ED,EAA7E,gBC3HOY,MARf,SAAeC,GACX,OACEA,EAAMC,OAAU,sBAAKR,UAAS,sBAAiBO,EAAMC,MAAML,KAA7B,gCAAiEM,KAAK,QAApF,UACpB,iCAASF,EAAMC,MAAML,OADD,IACiBI,EAAMC,MAAME,Q,OCFpC,SAASC,EAAOJ,GAC3B,OACI,qBAAKP,UAAS,yCAAoCO,EAAMK,KAA1C,eAAqDL,EAAMK,MAAzE,SACA,sBAAKZ,UAAU,kBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,eAAea,GAAG,IAAlC,SAAuCN,EAAMO,QAC7C,wBAAQd,UAAU,iBAAiBG,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMH,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BE,GAAG,yBAA7C,UACE,qBAAIF,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,kBAAkB,eAAa,OAAOa,GAAG,IAAzD,oBAEF,oBAAIb,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,WAAWa,GAAG,SAA9B,wBASJ,sBAAKb,UAAS,sCAA8C,UAAbO,EAAMK,KAAe,OAAO,SAA3E,UACV,uBAAOR,QAASG,EAAMQ,WAAYf,UAAU,mBAAmBG,KAAK,WAAWD,GAAG,2BAClF,uBAAOF,UAAU,mBAAmBgB,QAAQ,yBAA5C,yCCqCaC,MA/Df,SAAkBV,GACd,MAAqBd,mBAAS,IAA9B,mBAAOyB,EAAP,KAAYC,EAAZ,KA+BF,OACE,qCACA,sBAAKnB,UAAU,YAAYC,MAAO,CAACL,MAAmB,UAAbW,EAAMK,KAAe,QAAQ,SAAtE,UACI,6BAAKL,EAAMa,UACb,qBAAKpB,UAAU,OAAf,SAEE,0BACEA,UAAU,eACVE,GAAG,QACHmB,KAAK,IACLC,MAAOJ,EACPK,SAlBe,SAACC,GAElBL,EAAQ,IAERM,QAAQC,IAAI,YAAYR,GACxBC,EAAQK,EAAEG,OAAOL,YAgBnB,wBAAQtB,UAAU,kBAAkBI,QA5ClB,WAChBqB,QAAQC,IAAI,6BACZ,IAAIE,EAAQV,EAAKW,cACjBV,EAAQS,GACRrB,EAAMuB,UAAU,0BAA0B,YAwC5C,kCACA,wBAAQ9B,UAAU,uBAAuBI,QAtCvB,WAChB,IAAIwB,EAAQV,EAAKa,cACjBZ,EAAQS,GACRrB,EAAMuB,UAAU,0BAA0B,YAmC5C,kCACA,wBAAQ9B,UAAU,uBAAuBI,QAlCpB,WAEnBe,EADY,IAEZZ,EAAMuB,UAAU,wBAAwB,YA+B1C,wBACA,wBAAQ9B,UAAU,uBAAuBI,QA7B1B,WACb,IAAI4B,EAAMC,SAASC,eAAe,SAClCF,EAAMG,SACNC,UAAUC,UAAUC,UAAUN,EAAMV,QA0BtC,0BAEF,sBAAKtB,UAAU,iBAAiBC,MAAO,CAACL,MAAmB,UAAbW,EAAMK,KAAe,QAAQ,SAA3E,UACI,mDACA,8BAAIM,EAAKqB,MAAM,KAAKC,OAApB,cAAuCtB,EAAKsB,OAA5C,iBAEA,8BAAI,KAAMtB,EAAKqB,MAAM,KAAKC,OAA1B,mBACA,yCACA,4BAAItB,EAAKsB,OAAO,EAAEtB,EAAK,8D,OCGhBuB,MAlDf,WACE,MAAwBhD,mBAAS,SAAjC,mBAAOmB,EAAP,KAAa8B,EAAb,KACA,EAA0BjD,mBAAS,MAAnC,mBAAOe,EAAP,KAAcmC,EAAd,KACMb,EAAU,SAACc,EAAQzC,GACvBwC,EAAS,CACPjC,IAAIkC,EACJzC,KAAKA,IAEP0C,YAAW,WACTF,EAAS,QACR,MAgBL,OACE,mCAEE,eAAC,IAAD,WACA,cAAChC,EAAD,CAAQG,MAAM,YAAYF,KAAMA,EAAMG,WAlBvB,WACJ,UAATH,GACF8B,EAAQ,QACVT,SAASa,KAAK7C,MAAMJ,gBAAgB,UACpCiC,EAAU,8BAA8B,aAGtCY,EAAQ,SACRT,SAASa,KAAK7C,MAAMJ,gBAAgB,QACpCiC,EAAU,+BAA+B,eAUzC,cAAC,EAAD,CAAOtB,MAAOA,IAEd,eAAC,IAAD,WACI,cAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,SAAlB,SACE,cAACxD,EAAD,MAGF,cAAC,IAAD,CAAOuD,OAAK,EAACC,KAAK,IAAlB,SACA,qBAAKhD,UAAU,iBAAf,SACF,cAAC,EAAD,CAAUoB,QAAQ,wBAAwBU,UAAWA,EAAWlB,KAAMA,iBCxC/DqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAASC,eAAe,SAM1Be,M","file":"static/js/main.30abb0d7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n    const [theme, settheme] = useState('Dark')\r\n    const [myStyle, setmyStyle] = useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    });\r\n    const handleThemeChange=()=>{\r\n        if(myStyle.color=== 'black'){\r\n            setmyStyle({\r\n                color:'white',\r\n            backgroundColor:'black',\r\n            border:'1px solid white'\r\n            });\r\n            settheme('Light')\r\n        }\r\n        if(myStyle.color=== 'white'){\r\n            setmyStyle({\r\n                color:'black',\r\n            backgroundColor:'white'\r\n            });\r\n            settheme('Dark')\r\n        }\r\n       \r\n        \r\n        \r\n    }\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={myStyle}>\r\n        <h1 className=\"my-3\">About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n              <button\r\n                className=\"accordion-button\"\r\n                type=\"button\"\r\n                style={myStyle}\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"collapseOne\"\r\n              >\r\n                Accordion Item #1\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseOne\"\r\n              className=\"accordion-collapse collapse show\"\r\n              aria-labelledby=\"headingOne\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the first item's accordion body.</strong> It is\r\n                shown by default, until the collapse plugin adds the appropriate\r\n                classNamees that we use to style each element. These classNamees control\r\n                the overall appearance, as well as the showing and hiding via\r\n                CSS transitions. You can modify any of this with custom CSS or\r\n                overriding our default variables. It's also worth noting that\r\n                just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseTwo\"\r\n                style={myStyle}\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseTwo\"\r\n              >\r\n                Accordion Item #2\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseTwo\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingTwo\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the second item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classNamees that we use to style each element. These\r\n                classNamees control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseThree\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseThree\"\r\n                style={myStyle}\r\n              >\r\n                Accordion Item #3\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseThree\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingThree\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the third item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classNamees that we use to style each element. These\r\n                classNamees control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button className=\"btn btn-primary my-3\" onClick={handleThemeChange}>Enable {theme} Mode</button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n      props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{props.alert.type}</strong>:{props.alert.msg}\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n              </li>\r\n              \r\n             \r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input onClick={props.toggleMode} className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title:PropTypes.string\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nfunction TextForm(props) {\r\n    const [text,setText]=useState('');\r\n    const handleUpClick=()=>{\r\n        console.log(\"hello from handle clicked\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to upper case\",\"success\")\r\n\r\n    }\r\n    const handleLoClick=()=>{\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lower case\",\"success\")\r\n    }\r\n    const handleClearClick=()=>{\r\n        let newText='';\r\n        setText(newText);\r\n        props.showAlert(\"Text has been cleared\",\"success\")\r\n\r\n    }\r\n    const handleCopy=()=>{\r\n        let ctext=document.getElementById('mybox');\r\n        ctext.select();\r\n        navigator.clipboard.writeText(ctext.value)\r\n    }\r\n    const handleOnChange=(e)=>{\r\n    \r\n        setText('');\r\n        \r\n        console.log(\"onchanged\",text);\r\n        setText(e.target.value)\r\n    }\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color:props.mode==='light'?'black':'white'}}>\r\n        <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        \r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"mybox\"\r\n          rows=\"8\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n        ></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert To UpperCase</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert To Lowercase</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n    </div>\r\n    <div className=\"container my-2\" style={{color:props.mode==='light'?'black':'white'}}>\r\n        <h2>Your Text Summary</h2>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        {/* as to read 125 words approx 1 minute is required for slow reader */}\r\n        <p>{0.008*text.split(\" \").length} Minutes Read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:'Enter something in textArea to preview the same...'}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TextForm;\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n  \n} from \"react-router-dom\";\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  }\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\")\n    document.body.style.backgroundColor='#1c2e47';\n    showAlert(\"Dark Mode has been enbabled\",\"success\")\n    }\n    else {\n      setMode(\"light\")\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light Mode has been enbabled\",\"success\")\n\n\n    }\n  };\n  return (\n    <>\n      \n      <Router>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      \n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          \n          <Route exact path=\"/\">\n          <div className=\"container my-3\">\n        <TextForm heading=\"Enter text to analyze\" showAlert={showAlert} mode={mode}/>\n      \n       </div>\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}